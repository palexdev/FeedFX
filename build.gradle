import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'application'
    id 'java'
    id 'org.openjfx.javafxplugin' version "$jfxPlugin"
    id 'org.beryx.jlink' version "$jlink"
    id 'com.gradleup.shadow' version "$shadow"
}

group = 'palexdev'
version = "$version"

repositories {
    mavenCentral()
    mavenLocal()

    flatDir {
        dirs "$rootDir/libs"
    }
}

dependencies {
    // Standard
    // Inverno Framework :D
    annotationProcessor "io.inverno:inverno-core-compiler:$inverno"
    implementation "io.inverno:inverno-core:$inverno"

    implementation "com.rometools:rome:$rome"
    implementation "com.rometools:rome-modules:$rome"
    implementation "org.xerial:sqlite-jdbc:$sqlite"

    // UI
    implementation "io.github.palexdev:architectfx:$architectfx"
    implementation "io.github.palexdev:mfxcore:$mfxcore"
    implementation "io.github.palexdev:mfxcomponents:$materialfx"
    implementation "io.github.palexdev:virtualizedfx:$virtualizedfx"
    implementation "io.github.palexdev:rectcut-java:$rectcut"
    implementation "io.github.palexdev:imcache:$imcache"
    implementation "com.twelvemonkeys.imageio:imageio-bmp:$imageio"
    implementation "com.twelvemonkeys.imageio:imageio-webp:$imageio"

    // Logging
    implementation "org.tinylog:tinylog-impl:$tinylog"
    implementation "org.tinylog:slf4j-tinylog:$tinylog"
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:3.0.0-beta2'

    // Test
    testImplementation platform("org.junit:junit-bom:$junit")
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

application {
    mainModule = 'FeedFX'
    mainClass = 'io.github.palexdev.feedfx.FeedFX'
}

java {
    sourceCompatibility = "$jdk"
    targetCompatibility = "$jdk"
    withJavadocJar()
    withSourcesJar()
}

javafx {
    version = "$jfx"
    configurations = ['implementation', 'testImplementation']
    modules = ['javafx.fxml', 'javafx.graphics', 'javafx.swing']
}

test {
    useJUnitPlatform()
}

// Since we are using a compile time DI framework, everytime the code changes
compileJava {
    doFirst {
        if (!classes.state.upToDate)
            clean
    }
}

tasks.register('zipAssets', Zip) {
    delete(file("src/main/resources/io/github/palexdev/feedfx/assets/assets.zip"))

    destinationDirectory = file("src/main/resources/io/github/palexdev/feedfx/assets")
    archiveFileName = "assets.zip"

    from "src/main/resources/io/github/palexdev/feedfx/css"
    from ("src/main/resources/io/github/palexdev/feedfx/fonts") {
        into "fonts"
    }
    from ("src/main/resources/io/github/palexdev/feedfx/assets") {
        exclude "assets.zip"
        into "assets"
    }

    outputs.upToDateWhen { false }

    doLast {
        copy {
            from archiveFile
            into "${file(layout.buildDirectory)}/resources/main/io/github/palexdev/feedfx/assets"
        }
    }
}

sourcesJar.dependsOn(zipAssets)
processResources.finalizedBy(zipAssets)

/* Shadow Jar */
artifacts {
    archives javadocJar
    archives sourcesJar
    archives jar
    archives shadowJar
}

shadowJar {
    mergeServiceFiles()
}

/* Jlink & JPackage */
jlink {
    def os
    if (project.hasProperty('os')) {
        os = project.getProperty('os')
    } else {
        os = getOS()
    }
    if (os == null)
        throw new IllegalStateException("Unknown os")

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'ArchitectFX'
    }

    addExtraDependencies("javafx")
    forceMerge("tinylog")
    forceMerge("slf4j")

    mergedModule {
        uses 'org.slf4j.spi.SLF4JServiceProvider';
        uses 'org.tinylog.policies.Policy';
        uses 'org.tinylog.converters.FileConverter';
        uses 'org.tinylog.configuration.ConfigurationLoader';
        uses 'org.tinylog.provider.LoggingProvider';
        uses 'org.tinylog.writers.Writer';
        provides 'org.tinylog.converters.FileConverter' with 'org.tinylog.converters.GzipFileConverter';
        provides 'org.tinylog.provider.LoggingProvider' with 'org.tinylog.core.TinylogLoggingProvider';
        provides 'org.slf4j.spi.SLF4JServiceProvider' with 'org.tinylog.slf4j.TinylogSlf4jServiceProvider';
        provides 'org.tinylog.configuration.ConfigurationLoader' with 'org.tinylog.configuration.PropertiesConfigurationLoader';
    }

    jpackage {
        appVersion = "$appVersion"
        installerName = 'FeedFX'
        description = 'FeedFX is a desktop app made with JavaFX to read articles from RSS feeds and keep them organized'
        vendor = 'palexdev'

        if (os == 'windows') {
            icon = "src/main/resources/io/github/palexdev/feedfx/assets/logo.ico"
            installerOptions += [
                    "--win-help-url", "https://github.com/palexdev/FeedFX",
                    "--win-dir-chooser",
                    "--win-menu",
                    "--win-per-user-install",
                    "--win-shortcut",
                    "--win-shortcut-prompt",
            ]
        }

        if (os == 'linux') {
            icon = "src/main/resources/io/github/palexdev/feedfx/assets/logo.png"
            installerOptions += [
                    "--linux-package-name", "feedfx",
                    "--linux-menu-group", '"News;RSS;Reading;"',
                    "--install-dir", "/opt",
                    "--linux-shortcut"
            ]
        }
    }
}

static String getOS() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return 'windows'
    }
    if (Os.isFamily(Os.FAMILY_UNIX)) {
        return 'linux'
    }
    if (Os.isFamily(Os.FAMILY_MAC)) {
        return 'macos'
    }
    return null
}


/* Generate Properties for runtime checks */
def buildDir = file(layout.buildDirectory)
tasks.register('generateProps') {
    def outputDir = file("$buildDir/generated/resources/io/github/palexdev/feedfx")
    def versionFile = file("$outputDir/app.properties")

    outputs.file(versionFile)

    doLast {
        outputDir.mkdirs()
        versionFile.text = "version=$appVer"
    }
}

processResources.dependsOn generateProps
sourceSets.main.resources.srcDir("$buildDir/generated/resources")